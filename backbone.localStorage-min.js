// A simple module to replace `Backbone.sync` with *localStorage*-based
// persistence. Models are given GUIDS, and saved into a JSON object. Simple
// as that.
// Generate four random hex digits.
function guid(){return S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4()}function S4(){return((1+Math.random())*65536|0).toString(16).substring(1)}window.Store=function(a){this.name=a,this.async=!1,this.asyncDelay=50,this.load()},_.extend(Store.prototype,{empty:function(){var a,b,c,d,e;b=[],e=window.localStorage;for(d=0;d<e.length;d++)a=e[d],c=a.split("-",1)[0],c===this.name&&b.push(a);for(d=0;d<b.length;d++)a=b[d],window.localStorage.removeItem(a);this.load()},load:function(){var a=localStorage.getItem(this.name);this.records=a&&a.split(",")||[]},save:function(){localStorage.setItem(this.name,this.records.join(","))},create:function(a){a.id||(a.id=a.attributes.id=guid()),localStorage.setItem(this.name+"-"+a.id,JSON.stringify(a)),this.records.push(a.id.toString()),this.save();return a},update:function(a){localStorage.setItem(this.name+"-"+a.id,JSON.stringify(a)),_.include(this.records,a.id.toString())||this.records.push(a.id.toString()),this.save();return a},find:function(a){return JSON.parse(localStorage.getItem(this.name+"-"+a.id))},findAll:function(){return _.map(this.records,function(a){return JSON.parse(localStorage.getItem(this.name+"-"+a))},this)},destroy:function(a){localStorage.removeItem(this.name+"-"+a.id),this.records=_.reject(this.records,function(b){return b==a.id.toString()}),this.save();return a}}),Backbone.localSync=function(a,b,c,d){typeof c=="function"&&(c={success:c,error:d});var e,f=b.localStorage||b.collection.localStorage;switch(a){case"read":e=b.id?f.find(b):f.findAll();break;case"create":e=f.create(b);break;case"update":e=f.update(b);break;case"delete":e=f.destroy(b)}e?f.async?setTimeout(function(){c.success(e)},f.asyncDelay):c.success(e):c.error("Record not found")}